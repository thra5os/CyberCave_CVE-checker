from pprint import pprint
from vulnerability_classes import *
import json

def CVSS_V2_parser(metric):
    """
    Get CVSS V2 score from json data
    :param metric: V2 metric in json format
    :return: CVSS_V2 object or None if unable to parse
    """
    try:
        #(self, base_severity, access_complexity, access_vector, authentication, availability_impact, base_score, confidentiality_impact, integrity_impact, vector_string, exploitability_score, impact_score)
        base_severity = metric[0]['baseSeverity']
        access_complexity = metric[0]['cvssData']['accessComplexity']
        access_vector = metric[0]['cvssData']['accessVector']
        authentication = metric[0]['cvssData']['authentication']
        availability_impact = metric[0]['cvssData']['availabilityImpact']
        base_score = metric[0]['cvssData']['baseScore']
        confidentiality_impact = metric[0]['cvssData']['confidentialityImpact']
        integrity_impact = metric[0]['cvssData']['integrityImpact']
        vector_string = metric[0]['cvssData']['vectorString']
        exploitability_score = metric[0]['exploitabilityScore']
        impact_score = metric[0]['impactScore']

        new_metric = CVSS_V2(base_severity, access_complexity, access_vector, authentication, availability_impact, base_score, confidentiality_impact, integrity_impact, vector_string, exploitability_score, impact_score)
        return new_metric
    except Exception as e:
        print('Unable to parse V2 metric')
        print(e)
        return None


def CVSS_V30_parser(metric):
    """
    Get CVSS V3.0 score from json data
    :param metric: V3.0 metric in json format
    :return: CVSS_V30 object or None if unable to parse
    """
    try:
        # (self, attack_complexity, attack_vector, availability_impact, base_score, base_severity, confidentiality_impact, integrity_impact, previliges_required, scope, user_interaction, vector_string, exploitability_score, impact_score)
        attack_complexity = metric[0]['cvssData']['attackComplexity']
        attack_vector = metric[0]['cvssData']['attackVector']
        availability_impact = metric[0]['cvssData']['availabilityImpact']
        base_score = metric[0]['cvssData']['baseScore']
        base_severity = metric[0]['cvssData']['baseSeverity']
        confidentiality_impact = metric[0]['cvssData']['confidentialityImpact']
        integrity_impact = metric[0]['cvssData']['integrityImpact']
        previliges_required = metric[0]['cvssData']['privilegesRequired']
        scope = metric[0]['cvssData']['scope']
        user_interaction = metric[0]['cvssData']['userInteraction']
        vector_string = metric[0]['cvssData']['vectorString']
        exploitability_score = metric[0]['exploitabilityScore']
        impact_score = metric[0]['impactScore']


        new_metric = CVSS_V30(attack_complexity, attack_vector, availability_impact, base_score, base_severity, confidentiality_impact, integrity_impact, previliges_required, scope, user_interaction, vector_string, exploitability_score, impact_score)
        return new_metric
    except Exception as e:
        print('Unable to parse V30 metric')
        print(e)
        return None

def CVSS_V31_parser(metric):
    """
    Get CVSS V3.1 score from json data
    :param metric: V3.1 metric in json format
    :return: CVSS_V31 object or None if unable to parse
    """
    try:
        # (self, attack_complexity, attack_vector, availability_impact, base_score, base_severity, confidentiality_impact, integrity_impact, previliges_required, scope, user_interaction, vector_string, exploitability_score, impact_score)
        attack_complexity = metric[0]['cvssData']['attackComplexity']
        attack_vector = metric[0]['cvssData']['attackVector']
        availability_impact = metric[0]['cvssData']['availabilityImpact']
        base_score = metric[0]['cvssData']['baseScore']
        base_severity = metric[0]['cvssData']['baseSeverity']
        confidentiality_impact = metric[0]['cvssData']['confidentialityImpact']
        integrity_impact = metric[0]['cvssData']['integrityImpact']
        previliges_required = metric[0]['cvssData']['privilegesRequired']
        scope = metric[0]['cvssData']['scope']
        user_interaction = metric[0]['cvssData']['userInteraction']
        vector_string = metric[0]['cvssData']['vectorString']
        exploitability_score = metric[0]['exploitabilityScore']
        impact_score = metric[0]['impactScore']


        new_metric = CVSS_V31(attack_complexity, attack_vector, availability_impact, base_score, base_severity, confidentiality_impact, integrity_impact, previliges_required, scope, user_interaction, vector_string, exploitability_score, impact_score)
        return new_metric
    except Exception as e:
        print('Unable to parse V31 metric')
        print(e)
        return None

def CVE_metric(vulnerabilities):
    """
    Process the CVSS scores (V2, V3.0 & V3.1) for every vulnerability in the system
    :param vulnerabilities:
    :return:
    """
    try:
        with open("./CVEs/data.json", "r") as infile:
            data = json.load(infile)
            print(len(data['vulnerabilities']))
            for vuln in vulnerabilities:
                for cve in data['vulnerabilities']:
                    if cve['cve']['id'] == vuln.cve_id:
                        keys = cve['cve']['metrics'].keys()
                        temp = False
                        if 'cvssMetricV2' in keys:
                            vuln.V2metrics = CVSS_V2_parser(cve['cve']['metrics']['cvssMetricV2'])
                            temp = True
                        if 'cvssMetricV30' in keys:
                            vuln.V30metrics = CVSS_V30_parser(cve['cve']['metrics']['cvssMetricV30'])
                            temp = True
                        if 'cvssMetricV31' in keys:
                            vuln.V31metrics = CVSS_V31_parser(cve['cve']['metrics']['cvssMetricV31'])
                            temp = True

                        if not temp:

                            print(keys)
                            pprint(cve)
                        continue
    except Exception as e:
        print('Unable to open data.json')
        print(e)
    return vulnerabilities
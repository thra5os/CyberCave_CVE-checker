import tkinter as tk
import tkinter.ttk as ttk
import AnalyseCVE
from Terminal import WindowsChamps1
import vulnerabilities_finder


class MENU:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("menu")
        self.root.geometry("640x480")

        # Create a style
        style = ttk.Style(self.root)

        # Import the tcl file
        self.root.tk.call("source", "forest-dark.tcl")

        # Set the theme with the theme_use method
        style.theme_use("forest-dark")

        self.create_menu()  # Call the method to create the menu
        self.main()  # Call the main method to create the table

    def boutton_principal(self):
        # Function to create the main button
        bouton_prin = tk.Button(self.root, text="SCAN", command=self.remplir_tableau_avec_fichiers)
        bouton_prin.pack(padx=20, pady=20)

    def new_windows(self):
        # Function to create a new window
        win2 = tk.Toplevel(self.root)
        win2.title("affiche")
        win2.geometry("380x180")

    def momo(self):
        # Function to run a command from WindowsChamps1
        cmd = WindowsChamps1()
        cmd.run()

    def create_menu(self):
        # Function to create the main menu
        main_menu = tk.Menu(self.root)

        self.boutton_principal()  # Place the SCAN button above the menu

        first_button = tk.Menu(main_menu, tearoff=0)
        first_button.add_command(label="Option 1", command=lambda: print("Option 1 selected"))
        first_button.add_command(label="Option 2", command=lambda: print("Option 2 selected"))

        second_button = tk.Menu(main_menu, tearoff=0)
        second_button.add_command(label="Option 3", command=lambda: print("Option 3 selected"))
        second_button.add_command(label="Option 4", command=lambda: print("Option 4 selected"))

        third_button = tk.Menu(main_menu, tearoff=0)
        third_button.add_command(label="Terminal", command=self.momo)

        fourth_button = tk.Menu(main_menu, tearoff=0)
        fourth_button.add_command(label="Option 7", command=lambda: print("Option 7 selected"))
        fourth_button.add_separator()
        fourth_button.add_command(label="Nouvelle fenetre", command=self.new_windows)

        main_menu.add_cascade(label="CVE", menu=first_button)
        main_menu.add_cascade(label="CSV", menu=second_button)
        main_menu.add_cascade(label="ANALYSE", menu=third_button)
        main_menu.add_cascade(label="WEB", menu=fourth_button)
        main_menu.add_command(label="QUIT", command=self.root.quit)

        self.root.config(menu=main_menu)

    def creerTableau(self):
        # Function to create the table
        self.tree = ttk.Treeview(self.root,
                                 columns=("ID", "!", "Nom", "Danger", "Nombre CVE", "A faire", "Détails"),
                                 show="headings")
        self.tree.heading("ID", text="ID")
        self.tree.heading("!", text="!")
        self.tree.heading("Nom", text="Application")
        self.tree.heading("Danger", text="Danger")
        self.tree.heading("Nombre CVE", text="Nombre CVE")
        self.tree.heading("A faire", text="A faire")
        self.tree.heading("Détails", text="Détails")

        self.tree.column('ID', width=20)  # Width of the ID column
        self.tree.column('!', width=50)  # Width of the ! column
        self.tree.column('Nom', width=150)
        self.tree.column('Danger', width=100)
        self.tree.column('Nombre CVE', width=100)
        self.tree.column('A faire', width=100)  # Width of the "A faire" column

        self.tree.pack()

    def remplir_tableau_avec_fichiers(self):
        # Function to fill the table with files
        #reponse = AnalyseCVE.main()
        reponse = vulnerabilities_finder.main()
        self.fichier_id_counter = 0  # Reset the ID counter
        for item in self.tree.get_children():
            self.tree.delete(item)

        for key, value in reponse.items():
            self.fichier_id_counter += 1
            if value.danger == "CRITICAL":
                coco = "Mettre à jour"
            else:
                coco = "Peu attendre"

            self.tree.insert('', 'end', values=(
                self.fichier_id_counter, value.max_score, value.app_name, value.danger, value.cve_number, coco,
                "Voir Détails"),
                             tags=("evenrow",))

    def on_treeview_click(self, event):
        # Function to handle clicks on the table
        region = self.tree.identify_region(event.x, event.y)
        if region == "separator":  # If the region is a column separator
            return
        item = self.tree.identify_row(event.y)
        if item and region == "cell" and self.tree.identify_column(
                event.x) == "#7":  # If the region is the "Details" column
            details_fichier = self.tree.item(item, 'values')
            self.afficher_details_page(details_fichier)

    def afficher_details_page(self, details_fichier):
        # Function to display details of a file in a new window
        fichier_id = details_fichier[0]

        details_window = tk.Toplevel(self.root)
        details_window.title(f"Détails du fichier (ID: {fichier_id})")
        details_window.geometry("500x500")
        details_label = tk.Label(details_window, text="Bonjour")
        details_label.pack()

    def main(self):
        # Main method to initialize the table and the select details
        self.creerTableau()
        self.tree.bind("<Button-1>", self.on_treeview_click)


if __name__ == "__main__":
    menu_instance = MENU()
    menu_instance.root.mainloop()

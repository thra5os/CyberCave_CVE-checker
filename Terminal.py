import tkinter as tk
from tkinter import ttk
import subprocess
import os


class WindowsChamps1:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Affichage des commandes")
        self.setup_ui()
        style = ttk.Style(self.root)
        self.root.tk.call("source", "forest-dark.tcl")
        style.theme_use("forest-dark")

    def setup_ui(self):
        self.champ_saisie = ttk.Entry(self.root, width=30)
        self.champ_saisie.pack(padx=20, pady=10)

        self.bouton_afficher = ttk.Button(self.root, text="Afficher contenu du champ",
                                          command=self.afficher_contenu_champ)
        self.bouton_afficher.pack(padx=20, pady=5)

        self.texte_output = tk.Text(self.root, height=20, width=100)
        self.texte_output.pack(padx=20, pady=10)

    def affiche_reponse_commande(self, commande):
        resultat = subprocess.run(commande, shell=True, capture_output=True, text=True)
        if resultat.returncode == 0:
            return resultat.stdout
        else:
            return resultat.stderr

    def afficher_contenu_champ(self):
        contenu_champ = self.champ_saisie.get()
        if contenu_champ.startswith("cd"):
            # Si la commande est 'cd', changez le répertoire de travail du programme principal
            chemin_nouveau_repertoire = contenu_champ.split(' ', 1)[-1]
            try:
                os.chdir(chemin_nouveau_repertoire)
                self.texte_output.insert(tk.END, f"Répertoire changé vers : {os.getcwd()}\n")
                # os.getcwd() permet de récupérer le répertoire de travail où nous nous trouvons actuellement.
            except FileNotFoundError:
                self.texte_output.insert(tk.END, f"Le répertoire spécifié n'existe pas.\n")
        else:
            # Sinon, exécutez la commande normalement
            reponse_commande = self.affiche_reponse_commande(contenu_champ)
            if reponse_commande:
                reponse_commande_sans_y_trema = reponse_commande.replace("ÿ", " ")
                # Les espaces sont remplacés à la base par des y trémas et je les remplace par des espaces.
                self.texte_output.insert(tk.END, str(reponse_commande_sans_y_trema))

    def run(self):
        self.root.mainloop()


def main():
    app = WindowsChamps1()
    app.run()


if __name__ == "__main__":
    main()

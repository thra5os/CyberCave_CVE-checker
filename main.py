# This is a sample Python script.
import os
import subprocess
import tkinter as tk
import requests
import pandas as pd

import seaborn as sns
from mitrecve import crawler
from pprint import pprint
from packaging import version
import re

# Press Maj+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
'''
"DisplayName,""Publisher"",""InstallDate"",""DisplayVersion"""
"Visual Studio Build Tools 2019,""Microsoft Corporation"",""20240130"",""16.11.33"""
"Brave,""Brave Software Inc"",""20240307"",""122.1.63.169"""
,,,
"Foxit PDF Reader,""Foxit Software Inc."",""20240129"",""2023.3.0.23028"""
"IntelliJ IDEA 2023.3.3,""JetBrains s.r.o."",,""233.14015.106"""
"Microsoft Edge,""Microsoft Corporation"",""20240309"",""122.0.2365.80"""
"Microsoft Edge Update,,,""1.3.185.21"""
"Microsoft Edge WebView2 Runtime,""Microsoft Corporation"",""20240310"",""122.0.2365.80"""
"STMicroelectronics STM32CubeIDE 1.14.1,""STMicroelectronics"",,""1.14.1"""
"WebStorm 2023.3.3,""JetBrains s.r.o."",,""233.14015.89"""
,,,
"Universal CRT Redistributable,""Microsoft Corporation"",""20240130"",""10.0.26624"""
"vs_FileTracker_Singleton,""Microsoft Corporation"",""20240130"",""16.10.31303"""
"HP Hotkey Support,""HP Inc."",""20240130"",""6.2.53.1"""
"Safe Exam Browser,""ETH Z?rich"",,""3.6.0.633"""
"Intel(R) Trusted Connect Services Client,""Intel Corporation"",,""1.65.245.0"""
"Microsoft Visual C++ 2015-2022 Redistributable (x64) - 14.38.33130,""Microsoft Corporation"",,""14.38.33130.0"""
"Microsoft Visual C++ 2015-2022 Redistributable (x86) - 14.38.33130,""Microsoft Corporation"",,""14.38.33130.0"""
"Python Launcher,""Python Software Foundation"",""20240130"",""3.12.1150.0"""
,,,
"Microsoft Visual C++ 2022 X86 Additional Runtime - 14.38.33130,""Microsoft Corporation"",""20240130"",""14.38.33130"""
"Microsoft Visual Studio Setup Configuration,""Microsoft Corporation"",""20240130"",""3.7.2182.35401"""
"Microsoft VC++ redistributables repacked.,""Intel Corporation"",""20240130"",""12.0.0.0"""
"vcpp_crt.redist.clickonce,""Microsoft Corporation"",""20240130"",""14.29.30153"""
"Intel(R) Trusted Connect Service Client x86,""Intel Corporation"",""20240130"",""1.65.245.0"""
"Microsoft Visual C++ 2019 X86 Debug Runtime - 14.29.30153,""Microsoft Corporation"",""20240130"",""14.29.30153"""
"Microsoft Visual C++ 2022 X86 Minimum Runtime - 14.38.33130,""Microsoft Corporation"",""20240130"",""14.38.33130"""
"Microsoft Visual Studio Setup WMI Provider,""Microsoft Corporation"",""20240130"",""3.7.2182.35401"""
"Intel(R) Chipset Device Software,""Intel(R) Corporation"",,""10.1.18243.8188"""
"STMicroelectronics stlink-server,""STMicroelectronics"",""20240305"",""2.1.1-1"""
'''






class CVSS():
    def __int__(self, base_score, base_severity, exploitability_score, impact_score):
        self.base_score = base_score
        self.base_severity = base_severity
        self.exploitability_score = exploitability_score
        self.impact_score = impact_score

    def __str__(self):
        return('Base Score : ' + str(self.base_score) + '\nBase Severity : ' + str(self.base_severity) + '\nExploitability Score : ' + str(self.exploitability_score) + '\nImpact Score : ' + str(self.impact_score))


class Vulnerability():
    def __init__(self, app_name, current_version, publisher, cve_id, severity, base_score, affected_version, description, url):
        self.app_name = str(app_name)
        self.current_version = str(current_version)
        self.publisher = str(publisher)
        self.cve_id = str(cve_id)
        self.severity = str(severity)
        self.base_score = str(base_score)
        self.affected_version = str(affected_version)
        self.description = str(description)
        self.url = str(url)

    def __str__(self):
        return('App Name : ' + self.app_name +
               '\nCurrent Version : ' + self.current_version +
               '\nPublisher : ' + self.publisher +
               '\nCVE ID : ' + self.cve_id +
               '\nSeverity : ' + self.severity +
               '\nBase Score : ' + self.base_score +
               '\nAffected Version : ' + self.affected_version +
               '\nDescription : ' + self.description +
               '\nURL : ' + self.url)




def create_vulnerability(program, cve, json_file, detected_version = 'Unknown'):
    app_name = program[0]
    current_version = program[1]
    try:
        publisher = json_file['containers']['cna']['affected'][0]['vendor']
    except KeyError:
        publisher = 'Unknown'
    cve_id = cve['ID']
    try:
        severity = json_file['containers']['cna']['metrics'][0]['cvssV3_1']['baseSeverity']
    except KeyError:
        severity = 'Unknown'
    try:
        base_score = json_file['containers']['cna']['metrics'][0]['cvssV3_1']['baseScore']
    except KeyError:
        base_score = 'Unknown'
    try:
        affected_version = json_file['containers']['cna']['affected'][0]['versions'][0]['lessThan']
    except KeyError:
        try:
            affected_version = json_file['containers']['cna']['affected'][0]['versions'][0]['lessThanOrEqual']
        except KeyError:
            try:
                affected_version = (json_file['containers']['cna']['affected'][0]['versions'][0]['version'])
            except KeyError:
                affected_version = detected_version

    description = cve['DESC']
    url = cve['URL']


    return Vulnerability(app_name, current_version, publisher, cve_id, severity, base_score, affected_version, description, url)
def cpe_to_cve(programs):
    vulnerabilities = []
    index = 0
    for i in programs:
        print(i)
        cve_simple = crawler.get_main_page(i[0])
        #cve_array = [x['ID'] for x in cve_simple.values()]


        #for j in cve_array:
        for j in cve_simple.values():
            index += 1
            url = 'https://cveawg.mitre.org/api/cve/' + j['ID']
            request = requests.get(url)
            if request.status_code == 200:
                print('OK - ' + str(index))
                #pprint(request.json())
                try:
                    keys = request.json()['containers']['cna']['affected'][0]['versions'][0].keys()
                except KeyError:
                    keys = None
                    print("Key Error")
                if ('lessThan' in keys):
                    try:
                        if version.parse(request.json()['containers']['cna']['affected'][0]['versions'][0]['lessThan']) > version.parse(i[1]):
                            vulnerabilities.append(create_vulnerability(i, j, request.json()))
                            print('Added')
                        else:
                            print('Not Added')
                    except Exception as e:
                        print("Exception ! - Less")
                        print(e)

                elif ('lessThanOrEqual' in keys):
                    try:
                        if version.parse(request.json()['containers']['cna']['affected'][0]['versions'][0]['lessThanOrEqual']) >= version.parse(i[1]):
                            vulnerabilities.append(create_vulnerability(i, j, request.json()))
                            print('Added - equal')
                        else:
                            print('Not Added - equal')
                    except Exception as e:
                        print("Exception ! - Equal")
                        print(e)
                else:

                    version_temp = version_parser(request.json()['containers']['cna']['affected'][0]['versions'][0]['version'])

                    if (version_temp == None):

                        vulnerabilities.append(create_vulnerability(i, j, request.json()))
                        print('Added - Unknown')

                    else:
                        try:
                            if version.parse(version_temp) >= version.parse(i[1]):
                                vulnerabilities.append(create_vulnerability(i, j, request.json(), version_temp))
                                print('Added - parse')
                            else:
                                print('Not Added - parse')
                        except Exception as e:
                            vulnerabilities.append(create_vulnerability(i, j, request.json(), version_temp))
                            print("Exception ! - Parse")
                            print(e)


                """
                if('lessThan' in keys):
                    if version.parse(request.json()['containers']['cna']['affected'][0]['versions'][0]['lessThan']) > version.parse(i[1]):
                        '''app_name = i[0]
                        current_version = i[1]
                        publisher = request.json()['containers']['cna']['affected'][0]['vendor']
                        cve_id = request.json()['cveMetadata']['cveId']
                        severity = request.json()['containers']['cna']['metrics'][0]['cvssV3_1']['baseSeverity']
                        base_score = request.json()['containers']['cna']['metrics'][0]['cvssV3_1']['baseScore']
                        affected_version = request.json()['containers']['cna']['affected'][0]['versions'][0]['lessThan']
                        description = j['DESC']
                        url = j['URL']
                        vulnerabilities.append(Vulnerability(app_name, current_version, publisher, cve_id, severity, base_score, affected_version, description, url))'''
                        vulnerabilities.append(create_vulnerability(i, j, request.json()))
                        print('Added')
                    else:
                        print('Not Added')
                elif('lessThanOrEqual' in keys):
                    if version.parse(request.json()['containers']['cna']['affected'][0]['versions'][0]['lessThanOrEqual']) >= version.parse(i[1]):
                        '''app_name = i[0]
                        current_version = i[1]
                        publisher = request.json()['containers']['cna']['affected'][0]['vendor']
                        cve_id = request.json()['cveMetadata']['cveId']
                        severity = request.json()['containers']['cna']['metrics'][0]['cvssV3_1']['baseSeverity']
                        base_score = request.json()['containers']['cna']['metrics'][0]['cvssV3_1']['baseScore']
                        affected_version = request.json()['containers']['cna']['affected'][0]['versions'][0]['lessThanOther']
                        description = j['DESC']
                        url = j['URL']
                        vulnerabilities.append(Vulnerability(app_name, current_version, publisher, cve_id, severity, base_score, affected_version, description, url))'''
                        vulnerabilities.append(create_vulnerability(i, j, request.json()))
                        print('Added - equal')
                    else:
                        print('Not Added - equal')
                #elif('version' in keys):
                else:
                    version_temp = version_parser(request.json()['containers']['cna']['affected'][0]['versions'][0]['version'])
                    '''
                    if(version == None):
                        if('x_legacyV4Record' in request.json()['container']['cna'].keys()):
                            version = version_parser(request.json()['container']['cna']['x_legacyV4Record'])
                    '''
                    if(version_temp == None):
                        '''app_name = i[0]
                        current_version = i[1]
                        publisher = request.json()['containers']['cna']['affected'][0]['vendor']
                        cve_id = request.json()['cveMetadata']['cveId']
                        severity = request.json()['containers']['cna']['metrics'][0]['cvssV3_1']['baseSeverity']
                        base_score = request.json()['containers']['cna']['metrics'][0]['cvssV3_1']['baseScore']
                        affected_version = 'Unknown'
                        description = j['DESC']
                        url = j['URL']
                        vulnerabilities.append(
                            Vulnerability(app_name, current_version, publisher, cve_id, severity, base_score,
                                          affected_version, description, url))'''
                        vulnerabilities.append(create_vulnerability(i, j, request.json()))
                        print('Added - Unknown')

                    else:
                        '''app_name = i[0]
                        current_version = i[1]
                        publisher = request.json()['containers']['cna']['affected'][0]['vendor']
                        cve_id = request.json()['cveMetadata']['cveId']
                        severity = request.json()['containers']['cna']['metrics'][0]['cvssV3_1']['baseSeverity']
                        base_score = request.json()['containers']['cna']['metrics'][0]['cvssV3_1']['baseScore']
                        affected_version = version_temp
                        description = j['DESC']
                        url = j['URL']
                        vulnerabilities.append(Vulnerability(app_name, current_version, publisher, cve_id, severity, base_score, affected_version, description, url))'''
                        vulnerabilities.append(create_vulnerability(i, j, request.json(), version_temp))
                        print('Added - parse')"""

    return vulnerabilities


def get_programs():
    # to get the path of the powershell
    powershell_path = r'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe'

    # the command to get the list of application and their versions
    powershell_command = r'Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion | Export-Csv -Path apps.csv -NoTypeInformation'

    # to actually execute the command
    subprocess.call([powershell_path, "-Command", powershell_command], shell=True)

    # use of pandas to remove all empty lines
    apps = pd.read_csv('apps.csv')
    apps = apps.dropna(how='all')
    print(apps.head(8))

    # to convert the pandas dataframe to an array
    applications_array = apps.values.tolist()

    # to delete the csv file :
    # subprocess.call([powershell_path, "-Command", "rm apps.csv"], shell=True)
    return applications_array



def version_parser(v):
    try:
        versionPattern = r'\d+(=?\.(\d+(=?\.(\d+)*)*)*)*'
        regexMatcher = re.compile(versionPattern)
        return regexMatcher.search(v).group(0)
    except:
        return None


# Press the green button in the gutter to run the script.
if __name__ == '__main__':

    #Premiers essais avec l'api de mitre (inconcluant car il manque la clef d'autorisation)
    """
    # MITRE
    #r = requests.get('https://cveawg.mitre.org/api/health-check')



    #CVEAWG
    r = requests.get('https://cve.circl.lu/api/browse/microsoft')
    print(r)
    print(r.json())
    r = requests.get('https://cve.circl.lu/api/search/microsoft/office')
    r = requests.get('http://cvepremium.circl.lu/api/search/microsoft/excel')
    #r = requests.get('http://cve.circl.lu/api/cve/CVE-2010-3333')
    print(r)
    #print(r.json())
    print(r.text)
    print(type(r.text))
    print(len(r.json()))
    print(r.json().keys())
    #temp = pd.read_json(r.json()['results'])
    temp = pd.read_json(r.text)
    """

    '''
    r = requests.get('https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=CVE-2019-1010218')
    print(r)
    print(r.json())
    '''


    '''
    value = 'https://services.nvd.nist.gov/rest/json/cves/2.0'
    value = 'https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=cpe:2.3:o:microsoft:windows_10:1607'
    r = requests.get(value)
    print(r)
    print(r.json())
    '''


    #Tests avec la librairie python mitrecve
    '''
    # cve_simple = crawler.get_main_page("word")
    value = 'Microsoft Edge'
    # cve_simple = crawler.get_main_page("Microsoft Visual C++ 2015-2022 Redistributable (x86) - 14.38.33130")
    cve_simple = crawler.get_main_page(value)
    pprint(cve_simple)
    # file = open("file.json", "w")
    # file.write(str(cve_simple))


    array = [x['ID'] for x in cve_simple.values()]
    array2 = [x['URL'] for x in cve_simple.values()]
    print(array)
    print(len(array))

    print('=====================================================')

    #print(crawler.get_detail('https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-2441'))
    #print(requests.get('https://www.cvedetails.com/cve/CVE-2024-26246/?q=CVE-2024-26246'))
    pprint(requests.get('https://cveawg.mitre.org/api/cve/CVE-2024-26246').json())
    print(requests.get('https://cveawg.mitre.org/api/cve/CVE-2024-26246').json()['containers']['cna']['affected'][0]['versions'][0]['lessThan'])
    '''



    #r = requests.get('https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=CVE-2024-26246')
    #r = requests.get('https://services.nvd.nist.gov/rest/json/cves/1.0?cpeMatchString=cpe:2.3:a:microsoft:internet_explorer:11.0.9600:*:*:*:*:*:*:*?apiKey=9e36ae78-9e51-4d81-9523-353be63273eb')
    #r = requests.get('https://services.nvd.nist.gov/rest/v1/cve/CPE23:/a:microsoft:internet_explorer:11.0.9600:*:*:*:*:*:*:*?apiKey=9e36ae78-9e51-4d81-9523-353be63273eb')
    #r = requests.get('https://services.nvd.nist.gov/rest/v1/cve/CPE23:/a:microsoft:internet_explorer:11.0.9600:*:*:*:*:*:*:*?apiKey=9e36ae78-9e51-4d81-9523-353be63273eb')

    #r = requests.get('https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=cpe:2.3:o:microsoft:windows_10:1607:*:*:*:*:*:*:*')
    #r = requests.get('https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=cpe:2.3:a:microsoft:internet_explorer:8.0.6001:beta:*:*:*:*:*:*')


    #r = requests.get('https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=cpe:2.3:a:wordpress:wordpress:5.7.2')

    #CPE23:/a:microsoft:internet_explorer:11.0.9600:*:*:*:*:*:*:*

    #r = requests.get('https://services.nvd.nist.gov/rest/json/cve/1.0/CVE-2022-29098?apiKey=9e36ae78-9e51-4d81-9523-353be63273eb&addOns=dictionaryCpes')
    #r = requests.get('https://services.nvd.nist.gov/rest/json/cve/2.0/CVE-2022-29098?apiKey=9e36ae78-9e51-4d81-9523-353be63273eb&addOns=dictionaryCpes') #Just get html content, unauthorized
    #r = requests.get('https://services.nvd.nist.gov/rest/json/cves/1.0/?apiKey=9e36ae78-9e51-4d81-9523-353be63273eb')

    #print(r)
    #pprint(r.text)
    #print(r)
    #print('--------')
    #pprint(r.json())
    #print(r.json())

    print('-------------------------------------------------------------')



    #Commande complémentaire qui prend plus de temps à l'exécution.
    #pprint(crawler.get_cve_detail(cve_simple))



    '''
    r = requests.get('https://www.cvedetails.com/cve/CVE-2009-4168/?q=CVE-2009-4168')
    print(r)
    print(r.text)
    '''



    programs = get_programs()
    programs2 = []
    print(programs)
    for i in programs:
        if 'NAN' not in str(i[0]).upper() and 'NAN' not in str(i[1]).upper():

            programs2.append(i)



    print(programs2)

    programs3 = [['Visual Studio Build Tools 2019', '16.11.33'], ['Brave', '123.1.64.109'], ['Foxit PDF Reader', '2024.1.0.23997'], ['IntelliJ IDEA 2023.3.3', '233.14015.106'], ['Microsoft Edge', '122.0.2365.92'], ['Microsoft Edge Update', '1.3.185.21'], ['Microsoft Edge WebView2 Runtime', '122.0.2365.92'], ['STMicroelectronics STM32CubeIDE 1.14.1', '1.14.1'], ['WebStorm 2023.3.3', '233.14015.89'], ['Universal CRT Redistributable', '10.0.26624'], ['vs_FileTracker_Singleton', '16.10.31303'], ['HP Hotkey Support', '6.2.53.1'], ['Safe Exam Browser', '3.6.0.633'], ['Intel(R) Trusted Connect Services Client', '1.65.245.0'], ['Microsoft Visual C++ 2015-2022 Redistributable (x64) - 14.38.33130', '14.38.33130.0'], ['Microsoft Visual C++ 2015-2022 Redistributable (x86) - 14.38.33130', '14.38.33130.0'], ['Python Launcher', '3.12.1150.0'], ['Microsoft Visual C++ 2022 X86 Additional Runtime - 14.38.33130', '14.38.33130'], ['Microsoft Visual Studio Setup Configuration', '3.7.2182.35401'], ['Microsoft VC++ redistributables repacked.', '12.0.0.0'], ['vcpp_crt.redist.clickonce', '14.29.30153'], ['Intel(R) Trusted Connect Service Client x86', '1.65.245.0'], ['Microsoft Visual C++ 2019 X86 Debug Runtime - 14.29.30153', '14.29.30153'], ['Microsoft Visual C++ 2022 X86 Minimum Runtime - 14.38.33130', '14.38.33130'], ['Microsoft Visual Studio Setup WMI Provider', '3.7.2182.35401'], ['Intel(R) Chipset Device Software', '10.1.18243.8188'], ['STMicroelectronics stlink-server', '2.1.1-1']]
    programs4 = [['Visual Studio Build Tools 2019', '16.11.33'], ['Brave', '123.1.64.109'], ['Foxit PDF Reader', '2024.1.0.23997'], ['IntelliJ IDEA 2023.3.3', '233.14015.106'], ['Microsoft Edge', '122.0.2365.92']]
    vulnerabilities = cpe_to_cve(programs4)
    #print(vulnerabilities)
    print(len(vulnerabilities))
    for i in vulnerabilities:
        print(i)
        print('\n')

    unknown_severity = [x for x in vulnerabilities if x.severity == 'unknown']
    print(len(unknown_severity))

    unknown_version = [x for x in vulnerabilities if x.affected_version == 'unknown']
    print(len(unknown_version))
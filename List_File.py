import datetime
import tkinter as tk
from tkinter import ttk
import os


class Fichier():  # Définition d'une classe Fichier
    def __init__(self):
        self.root = tk.Tk()
        self.root.geometry("500x500")
        self.root.title("Fichier-lecture")
        #style = ttk.Style(self.root)
        #self.root.tk.call("source", "forest-dark.tcl")
        #style.theme_use("forest-dark")

    def actualiser(self):
        chemin = self.recup_chemin()
        self.remplir_tableau_avec_fichiers(chemin)


    def creerTableau(self):  # Méthode pour créer un tableau dans la fenêtre
        # Création du widget Treeview avec les colonnes appropriées
        self.tree = ttk.Treeview(self.root, columns=("Chemin", "Nom", "Version", "Sévérité", "Lien"), show="headings")
        self.tree.heading("Chemin", text="Chemin du fichier")
        self.tree.heading("Nom", text="Nom du fichier")
        self.tree.heading("Version", text="Version")
        self.tree.heading("Sévérité", text="Sévérité")
        self.tree.heading("Lien", text="Lien")
        # Configuration de la largeur de chaque colonne
        self.tree.column('Chemin', width=450)
        self.tree.pack()  # Placement du widget dans la fenêtre

    def remplir_tableau_avec_fichiers(self, dossier):
        for item in self.tree.get_children():
            self.tree.delete(item)

        # Parcourir tous les fichiers dans le dossier spécifié
        for fichier in os.listdir(dossier):
            chemin_complet = os.path.join(dossier,
                                          fichier)  # Obtention du chemin complet de chaque fichier (où nous sommes, fichier demandé)"
            if os.path.isfile(chemin_complet):  # Vérification si l'élément est un fichier
                # Ajouter les informations du fichier dans le tableau
                nom_fichier = os.path.basename(chemin_complet)  # Obtention du nom du fichier
                chemin_relative = os.path.abspath(chemin_complet)  # Obtention du chemin absolu du fichier
                timestamp_derniere_modification = os.path.getmtime(chemin_complet)
                derniere_modification = datetime.datetime.fromtimestamp(timestamp_derniere_modification)
                self.tree.insert('', 'end', values=(chemin_relative, nom_fichier, derniere_modification, "", ""))
                # Insertion des valeurs dans le tableau

    def recup_chemin(self):  # Méthode pour récupérer le chemin absolu du dossier actuel
        dossier_actuel = os.getcwd()  # Récupérer le dossier actuel
        chemin_absolu = os.path.abspath(dossier_actuel)  # Récupérer le chemin absolu du dossier actuel

        return chemin_absolu  # Retourner le chemin absolu du dossier actuel

    def changer_dossier(self, nouveau_dossier):
        self.remplir_tableau_avec_fichiers(nouveau_dossier)

    def main(self):

        self.creerTableau()  # Appel de la méthode pour créer le tableau dans la fenêtre
        self.actualiser()
        #self.recup_chemin()  # Appel de la méthode pour récupérer le chemin absolu du dossier actuel
        #self.remplir_tableau_avec_fichiers(self.recup_chemin())  # Appel de la méthode pour remplir le tableau


if __name__ == "__main__":
    fichier = Fichier()  # Création de l'instance de la classe Fichier
    fichier.main()  # Appel de la méthode principale pour configurer et afficher la fenêtre
    fichier.root.mainloop()  # Lancement de la boucle principale pour afficher la fenêtre

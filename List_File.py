import datetime
import tkinter as tk
from tkinter import ttk
import os

class Fichier():
    def __init__(self):
        self.root = tk.Tk()
        self.root.geometry("1500x500")
        self.root.title("Fichier-lecture")
        self.fichier_id_counter = 0  # Variable pour suivre les ID des fichiers

    def actualiser(self):
        chemin = self.recup_chemin()
        self.remplir_tableau_avec_fichiers(chemin)

    def creerTableau(self):
        self.tree = ttk.Treeview(self.root, columns=("ID", "Chemin", "Nom", "Version", "Sévérité", "Lien", "Détails", "!"),
                                 show="headings")
        self.tree.heading("ID", text="ID")
        self.tree.heading("Chemin", text="Chemin du fichier")
        self.tree.heading("Nom", text="Nom du fichier")
        self.tree.heading("Version", text="Version")
        self.tree.heading("Sévérité", text="Sévérité")
        self.tree.heading("Lien", text="Lien")
        self.tree.heading("Détails", text="Détails")
        self.tree.heading("!", text="!")  # Correction de l'erreur ici
        self.tree.column('ID', width=50)  # Largeur de la colonne ID
        self.tree.column('Chemin', width=250)
        self.tree.pack()

    def remplir_tableau_avec_fichiers(self, dossier):
        self.fichier_id_counter = 0  # Réinitialiser le compteur d'ID
        for item in self.tree.get_children():
            self.tree.delete(item)

        for fichier in os.listdir(dossier):
            chemin_complet = os.path.join(dossier, fichier)
            if os.path.isfile(chemin_complet):
                self.fichier_id_counter += 1  # Incrémenter le compteur d'ID
                nom_fichier = os.path.basename(chemin_complet)
                chemin_relative = os.path.abspath(chemin_complet)
                timestamp_derniere_modification = os.path.getmtime(chemin_complet)
                derniere_modification = datetime.datetime.fromtimestamp(timestamp_derniere_modification)
                # Ajouter une zone de clic sur chaque détail
                self.tree.insert('', 'end', values=(self.fichier_id_counter, chemin_relative, nom_fichier, "", "", "", "Voir Détails", ""),
                                 tags=("evenrow",))

    def recup_chemin(self):
        dossier_actuel = os.getcwd()
        chemin_absolu = os.path.abspath(dossier_actuel)
        return chemin_absolu

    def on_treeview_click(self, event):
        # Récupérer la colonne et l'élément sur lequel on a cliqué
        region = self.tree.identify_region(event.x, event.y)
        if region == "separator":  # Si la région est un séparateur de colonne
            return
        item = self.tree.identify_row(event.y)
        if item and region == "cell" and self.tree.identify_column(event.x) == "#7":  # Si la région est la colonne "Détails"
            # Récupérer les détails du fichier et afficher une nouvelle page
            details_fichier = self.tree.item(item, 'values')
            self.afficher_details_page(details_fichier)

    def afficher_details_page(self, details_fichier):
        # Récupérer l'ID du fichier à partir des détails
        fichier_id = details_fichier[0]

        # Créer une nouvelle fenêtre pour afficher les détails du fichier
        details_window = tk.Toplevel(self.root)
        details_window.title(f"Détails du fichier (ID: {fichier_id})")
        details_window.geometry("500x500")
        # Afficher le texte "Bonjour" dans la nouvelle fenêtre
        details_label = tk.Label(details_window, text="Bonjour")
        details_label.pack()

    def main(self):
        self.creerTableau()
        self.actualiser()
        # Associer la méthode on_treeview_click à l'événement de clic sur le Treeview
        self.tree.bind("<Button-1>", self.on_treeview_click)

if __name__ == "__main__":
    fichier = Fichier()
    fichier.main()
    fichier.root.mainloop()
class VulnerableApplication:
    def __init__(self, app_name):
        self.app_name = app_name
        self.danger = None
        self.max_score = 0.0
        self.cve_number = 0
        #self.color_scale = 0
        self.related_vulnerabilities = []

    def add_vulnerability(self, vulnerability):
        if vulnerability.app_name == self.app_name:
            self.cve_number += 1
            self.related_vulnerabilities.append(vulnerability)
            known = False
            if vulnerability.V2metrics != None:
                V2_score = float(vulnerability.V2metrics.base_score)
                #V2_severity = vulnerability.V2metrics.base_severity
                self.max_score = max(self.max_score, V2_score)
                known = True
            if vulnerability.V30metrics != None:
                V30_score = float(vulnerability.V30metrics.base_score)
                #V2_severity = vulnerability.V2metrics.base_severity
                self.max_score = max(self.max_score, V30_score)
                known = True
            if vulnerability.V31metrics != None:
                V31_score = float(vulnerability.V31metrics.base_score)
                #V2_severity = vulnerability.V2metrics.base_severity
                self.max_score = max(self.max_score, V31_score)
                known = True


    def determine_danger(self):
        if self.max_score >= 9.0:
            self.danger = 'CRITICAL'
        elif self.max_score >= 7.0:
            self.danger = 'HIGH'
        elif self.max_score >= 4.0:
            self.danger = 'MEDIUM'
        elif self.max_score >= 0.1:
            self.danger = 'LOW'
        else:
            self.danger = 'NONE'


    def __str__(self):
        output = 'Color Scale : ' + str(self.max_score) + ' App Name : ' + str(self.app_name) + ' Danger : ' + str(self.danger) + ' Number of vulnerabilities : ' + str(self.cve_number)
        return output



class CVSS_V2:
    """
    Class for CVSS (Common Vulnerability Scoring System) Version 2
    """
    def __init__(self, base_severity, access_complexity, access_vector, authentication, availability_impact, base_score, confidentiality_impact, integrity_impact, vector_string, exploitability_score, impact_score) :
        self.base_severity = base_severity
        self.access_complexity = access_complexity
        self.access_vector = access_vector
        self.authentication = authentication
        self.availability_impact = availability_impact
        self.base_score = base_score
        self.confidentiality_impact = confidentiality_impact
        self.integrity_impact = integrity_impact
        self.vector_string = vector_string
        self.exploitability_score = exploitability_score
        self.impact_score = impact_score


    def __str__(self):
        return ('Base Score : ' + str(self.base_score) + '\nBase Severity : ' + str(
            self.base_severity) + '\nExploitability Score : ' + str(
            self.exploitability_score) + '\nImpact Score : ' + str(self.impact_score))


""" Data in the local json file
'cvssMetricV30': [{'cvssData': {'attackComplexity': 'LOW',
                                                     'attackVector': 'NETWORK',
                                                     'availabilityImpact': 'NONE',
                                                     'baseScore': 8.2,
                                                     'baseSeverity': 'HIGH',
                                                     'confidentialityImpact': 'LOW',
                                                     'integrityImpact': 'HIGH',
                                                     'privilegesRequired': 'NONE',
                                                     'scope': 'CHANGED',
                                                     'userInteraction': 'REQUIRED',
                                                     'vectorString': 'CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:H/A:N',
                                                     'version': '3.0'},
                                        'exploitabilityScore': 2.8,
                                        'impactScore': 4.7,"""

class CVSS_V30:
    """
    Class for CVSS (Common Vulnerability Scoring System) Version 3.0
    """
    def __init__(self, attack_complexity, attack_vector, availability_impact, base_score, base_severity, confidentiality_impact, integrity_impact, previleges_required, scope, user_interaction, vector_string, exploitability_score, impact_score):
        self.attack_complexity = attack_complexity
        self.attack_vector = attack_vector
        self.availability_impact = availability_impact
        self.base_score = base_score
        self.base_severity = base_severity
        self.confidentiality_impact = confidentiality_impact
        self.integrity_impact = integrity_impact
        self.previleges_required = previleges_required
        self.scope = scope
        self.user_interaction = user_interaction
        self.vector_string = vector_string
        self.exploitability_score = exploitability_score
        self.impact_score = impact_score

class CVSS_V31:
    """
    Class for CVSS (Common Vulnerability Scoring System) Version 3.1
    """
    def __init__(self, attack_complexity, attack_vector, availability_impact, base_score, base_severity, confidentiality_impact, integrity_impact, previleges_required, scope, user_interaction, vector_string, exploitability_score, impact_score):
        self.attack_complexity = attack_complexity
        self.attack_vector = attack_vector
        self.availability_impact = availability_impact
        self.base_score = base_score
        self.base_severity = base_severity
        self.confidentiality_impact = confidentiality_impact
        self.integrity_impact = integrity_impact
        self.previleges_required = previleges_required
        self.scope = scope
        self.user_interaction = user_interaction
        self.vector_string = vector_string
        self.exploitability_score = exploitability_score
        self.impact_score = impact_score


class Vulnerability:
    """
    Class representing one vulnerabilty for one application (one CVE)
    """
    def __init__(self, app_name, current_version, publisher, cve_id, affected_version,
                 description, url):
        self.app_name = str(app_name)
        self.current_version = str(current_version)
        self.publisher = str(publisher)
        self.cve_id = str(cve_id)
        #self.severity = str(severity)
        #self.base_score = str(base_score)
        self.affected_version = str(affected_version)
        self.description = str(description)
        self.url = str(url)
        self.V2metrics = None
        self.V30metrics = None
        self.V31metrics = None

    def __str__(self):


        output = str('App Name : ' + self.app_name +
                '\nCurrent Version : ' + self.current_version +
                '\nPublisher : ' + self.publisher +
                '\nCVE ID : ' + self.cve_id +
                #'\nSeverity : ' + self.severity +
                #'\nBase Score : ' + self.base_score +
                '\nAffected Version : ' + self.affected_version +
                '\nDescription : ' + self.description +
                '\nURL : ' + self.url)
        if self.V2metrics != None:
            output = output + str('\nV2metrics : ' +
                    '\n-Base Score : ' + str(self.V2metrics.base_score) +
                    '\n-Base Severity : ' + str(self.V2metrics.base_severity) +
                    '\n-Exploitability Score : ' + str(self.V2metrics.exploitability_score) +
                    '\n-Impact Score : ' + str(self.V2metrics.impact_score))
        if self.V30metrics != None:
            output = output + str('\nV30metrics : ' +
                                  '\n-Base Score : ' + str(self.V30metrics.base_score) +
                                  '\n-Base Severity : ' + str(self.V30metrics.base_severity) +
                                  '\n-Exploitability Score : ' + str(self.V30metrics.exploitability_score) +
                                  '\n-Impact Score : ' + str(self.V30metrics.impact_score))
        if self.V31metrics != None:
            output = output + str('\nV31metrics : ' +
                                  '\n-Base Score : ' + str(self.V31metrics.base_score) +
                                  '\n-Base Severity : ' + str(self.V31metrics.base_severity) +
                                  '\n-Exploitability Score : ' + str(self.V31metrics.exploitability_score) +
                                  '\n-Impact Score : ' + str(self.V31metrics.impact_score))
        return output

